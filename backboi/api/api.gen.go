// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Address Bin collection point address - as referenced in https://api.reading.gov.uk/v0.json#/components/schemas/Address'
type Address struct {
	AccountSiteId     *string `json:"AccountSiteId,omitempty"`
	AccountSiteUprn   *string `json:"AccountSiteUprn,omitempty"`
	SiteAddress2      *string `json:"SiteAddress2,omitempty"`
	SiteAddressPrefix *string `json:"SiteAddressPrefix,omitempty"`
	SiteEasting       *string `json:"SiteEasting,omitempty"`
	SiteId            *string `json:"SiteId,omitempty"`
	SiteLatitude      *string `json:"SiteLatitude,omitempty"`
	SiteLongitude     *string `json:"SiteLongitude,omitempty"`
	SiteNorthing      *string `json:"SiteNorthing,omitempty"`
	SiteShortAddress  *string `json:"SiteShortAddress,omitempty"`
}

// Addresses List of addresses - as referenced in https://api.reading.gov.uk/v0.json#/components/schemas/Addresses'
type Addresses = []Address

// Collection defines model for Collection.
type Collection struct {
	Date     *string `json:"date,omitempty"`
	Day      *string `json:"day,omitempty"`
	ReadDate *string `json:"read_date,omitempty"`
	Round    *string `json:"round,omitempty"`
	Schedule *string `json:"schedule,omitempty"`
	Service  *string `json:"service,omitempty"`
}

// Collections defines model for Collections.
type Collections struct {
	// Collections List of collections for associated UPRN
	Collections      *[]Collection `json:"collections,omitempty"`
	ErrorCode        *int          `json:"error_code,omitempty"`
	ErrorDescription *string       `json:"error_description,omitempty"`
	Success          *bool         `json:"success,omitempty"`
	Uprn             *string       `json:"uprn,omitempty"`
}

// Status defines model for Status.
type Status struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCalendarFeedParams defines parameters for GetCalendarFeed.
type GetCalendarFeedParams struct {
	// FromDate Start date of when calendar feed will be generated from (in YYYY-MM-DD format)
	FromDate *string `form:"from_date,omitempty" json:"from_date,omitempty"`

	// ToDate End date of when calendar feed will be generated from (in YYYY-MM-DD format)
	ToDate *string `form:"to_date,omitempty" json:"to_date,omitempty"`
}

// GetCollectionDatesParams defines parameters for GetCollectionDates.
type GetCollectionDatesParams struct {
	// FromDate Start date of when collection date list will be generated from (in YYYY-MM-DD format)
	FromDate *string `form:"from_date,omitempty" json:"from_date,omitempty"`

	// ToDate End date of when collection date list will be generated from (in YYYY-MM-DD format)
	ToDate *string `form:"to_date,omitempty" json:"to_date,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /addresses/{postcode})
	GetAddresses(ctx echo.Context, postcode string) error

	// (GET /calendar/{uprn})
	GetCalendarFeed(ctx echo.Context, uprn string, params GetCalendarFeedParams) error

	// (GET /collections/{uprn})
	GetCollectionDates(ctx echo.Context, uprn string, params GetCollectionDatesParams) error

	// (GET /health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddresses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postcode" -------------
	var postcode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "postcode", runtime.ParamLocationPath, ctx.Param("postcode"), &postcode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postcode: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddresses(ctx, postcode)
	return err
}

// GetCalendarFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetCalendarFeed(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uprn" -------------
	var uprn string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uprn", runtime.ParamLocationPath, ctx.Param("uprn"), &uprn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uprn: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCalendarFeedParams
	// ------------- Optional query parameter "from_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "from_date", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from_date: %s", err))
	}

	// ------------- Optional query parameter "to_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "to_date", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCalendarFeed(ctx, uprn, params)
	return err
}

// GetCollectionDates converts echo context to params.
func (w *ServerInterfaceWrapper) GetCollectionDates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uprn" -------------
	var uprn string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uprn", runtime.ParamLocationPath, ctx.Param("uprn"), &uprn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uprn: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCollectionDatesParams
	// ------------- Optional query parameter "from_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "from_date", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from_date: %s", err))
	}

	// ------------- Optional query parameter "to_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "to_date", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCollectionDates(ctx, uprn, params)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/addresses/:postcode", wrapper.GetAddresses)
	router.GET(baseURL+"/calendar/:uprn", wrapper.GetCalendarFeed)
	router.GET(baseURL+"/collections/:uprn", wrapper.GetCollectionDates)
	router.GET(baseURL+"/health", wrapper.Health)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYX0/byhP9Kqv9/aTeK4XE5iak5C2FlFZKKUrgAVVVtawn8bbOrrs7DkQo3/1q1iaJ",
	"YxvoFUi8xd75c2bmnFnDPZdmkRoNGh0f3HMnY1gI/3MYRRac/xmBk1alqIzmA/5BaSZNkoCkFyw1SiMT",
	"uTU7YMIxCzOwoCVETGkWI6Zu0OmIVLUtiEjpeXtulu3sV2cZtH86o//X2aLoFBA6Rf53vMVTa1KwqCAH",
	"JqXJNE4VwueIXsCdWKQJ8AHvh91el7c4rlJ6dGiVnvN1a9fnKrW67PVPGAT9w26vV+dJLgWUw7Lb9JKd",
	"fR6Ppuxk/HU6esL3wsJM3ZUDnBsNTW4j4ZAeSw7dfvg+DNtBk9N+O466/TBsMh4LVJhFUHbphe1uLwyC",
	"4+Co2210NXpe43sQtI+P+sdH3ffHQdjrN3mfG4txpbawf3jc6zbXNo2NxR1Obj2H49PRhH36ejUdtdjH",
	"8fCShS1WHk6LTc5CdjicVKOvN2/MzU+Q6NmSp4Ea8o+VQ2ZmD3yHV2A8eM4rhIXP/38LMz7gj3nwbRHC",
	"WrGi55ONQilIWUGRQD+6SqMjsap9T0X8aPSyJtNR7QnhjLKk3s2BXSpZd1Y3k209rlqQLB/Wj2zHiM2M",
	"ZcI5I5VAiNjVxeT8uT3faWxN28FaY39IE+3WpTTCHOz2vASwrjWZlAXPi7MbYxIQPmVWLLBnNG2KArPa",
	"fjXhW4BzYt4wFAu/M2Uh4oNveYit/fdKdnJQemaqAxlqNrz47GcwB6Q1x27Kd0oEKFTi2MyaBZvkCmK0",
	"waVKSMIKvfI/KH1jFAXjLb4E6/L4QZt25LrFTQpapIpWfDtfm6nA2HegsxFw5z41DqmcNR3MAauIJ4CZ",
	"1Y4lFfVjLJAtBMqYYQxsrpZAV2IekHsIVlAU2s38DHC7WwiNFQtAsI4Pvu3nvCiCUD4KvZPTMAtoFSwp",
	"gyJjqou3uBYL6stO/u3I0GbQKi74uvF+J2OXGl3svcMgyKmiEbTviUjTRElfTYeW2PaD4Zl7ClxOiz06",
	"bArzfaRRbwrwxjORJfhiWApN1AA5zTMxr1FWMLvodmY1/ZKJ8p9Ka+/ekSIBHQnbuSdRNvPnDJC1lXTs",
	"wYHNACKvgGL1VHhyUlh+BIieosplDD4Oq+ELu42Ng73Et/DOAkO7omZTWRZoudeSya+bPyFSax/eFIVF",
	"RtcHYbuNQe/DUUnCboDNQVMXqDMk/L+UZtfX19cHX74cnJ5StxYC/35A+TsDu9rCJI/8ivojbCMdvTYy",
	"NE/jelp8CHe44VuZ7fvBKsQ+qWfdWxfX9r5+jr6SyjXvB+seV9nG+JRsX0Jo++n3tfb46n4dtZUx5a16",
	"U6J7LYAvo73/rofdr9YaUYyf5Owb12gMIsG4UZef/DGTMchfDHTk/1dQ0WFuxV9xDM0l04co/SEClhUf",
	"3bMsSVbMZlo//FH0Vvu/Xv8bAAD//4HzF4q/EQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
